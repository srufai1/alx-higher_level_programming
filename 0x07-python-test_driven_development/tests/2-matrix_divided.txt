=============================
The ```matrix_divided``` module
=============================

Using ```div```
-----------------------------
This is a function that divides all elements of a matrix.
	
	prototype: def matrix_divided(matrix, div):
	matrix must be a list of integers or floats, otherwise raise a TypeError
	exception with the message "matrix must be a matrix(list of lists) of 
	integers/floats"
	Each row of the matrix must be of the same size, otherwise raise a TypeError
	exception with the massage "Each row of the matrix must have the same size"
	div must be a number (integer or float), otherwise raise a TypeError exception
	with the message "div must be a number"
	div can't be equal to 0, otherwise raise a ZeroDivisionError exception with the
	message "division by zero"
	All elements of the matrix should be divided by div, rounded to 2 decimal places.
	Returns a new matrix
	You are not allowed to import any module

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test cases for matrix_divided function

# Example 1: Dividing a matrix by 3
>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> result = matrix_divided(matrix, 3)
>>> result
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix	# Ensure the original matrix is unchanged
[[1, 2, 3], [4, 5, 6]]

# Example 2: Dividing a matrix by 0 (should raise ZeroDivisionError)
>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

# Example 3: Invalid matrix with rows of different sizes (should raise TypeError)
>>> matrix = [
...	[1, 2, 3],
...	[4, 5],
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

# Example 4: Invalid matrix with non-integer/float elements (should raise TypeError)
>>> matrix = [
...	[1, 2, 3],
...	[4, 'five', 6]
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Example 5: Dividing a matrix by 1 (no change should occur)
>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> result = matrix_divided(matrix, 1)
>>> result
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
>>> matrix # Ensure the original matrix is unchanged
[[1, 2, 3], [4, 5, 6]]

# Example 6: Empty Matrix
>>> matrix = []
>>> result = matrix_divided(matrix, 5)
>>> result
[]
>>> matrix # Ensure the original matrix is unchanged
[]

# Example 7: Matrix with a Single Element
>>> matrix = [[7]]
>>> result = matrix_divided(matrix, 2)
>>> result
[[3.5]]
>>> matrix # Ensure the original matrix is unchanged
[[7]]

# Example 8: Dividing by a Negative Number
>>> matrix = [
...	[10, 20],
...	[30, 40]
... ]
>>> result = matrix_divided(matrix, -2)
>>> result
[[-5.0, -10.0], [-15.0, -20.0]]
>>> matrix # Ensure the original matrix is unchanged
[[10, 20], [30, 40]]

# Example 9: Large Values
>>> matrix = [
...	[1000000, 2000000],
...	[3000000, 4000000]
... ]
>>> result = matrix_divided(matrix, 1000)
>>> result
[[1000.0, 2000.0], [3000.0, 4000.0]]
>>> matrix # Ensure the original matrix is unchanged
[[1000000, 2000000], [3000000, 4000000]]

# Example 10: Non-numeric Elements (should raise TypeError)
>>> matrix = [
...	[1, 2, 3],
...	[4, 'five', 6]
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Example 11: Matrix with Non-uniform Row Sizes (should raise TypeError)
>>> matrix = [
...	[1, 2, 3],
...	[4, 5],
... ]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

# Example 12: Mix of Integers and Floats
>>> matrix = [
...	[1, 2.0, 3],
...	[4.5, 5, 6.2]
... ]
>>> result = matrix_divided(matrix, 2)
>>> result
[[0.5, 1.0, 1.5], [2.25, 2.5, 3.1]]
>>> matrix # Ensure the original matrix is unchanged
[[1, 2.0, 3], [4.5, 5, 6.2]]

# Example 13: Testing Boundary Cases
>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> result = matrix_divided(matrix, 0.0001)
>>> result
[[10000.0, 20000.0, 30000.0], [40000.0, 50000.0, 60000.0]]
>>> matrix # Ensure the original matrix is unchanged
[[1, 2, 3], [4, 5, 6]]